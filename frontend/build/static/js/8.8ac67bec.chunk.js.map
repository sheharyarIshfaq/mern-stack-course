{"version":3,"sources":["places/pages/NewPlace.js","shared/components/UI/ImageUpload.js"],"names":["NewPlace","authCtx","useContext","AuthContext","useHttpClient","isLoading","error","sendRequest","clearError","useForm","title","value","isValid","description","address","image","formState","inputHandler","history","useHistory","placeSubmitHandler","event","a","preventDefault","formData","FormData","append","inputs","userId","process","Authorization","token","push","onClear","className","onSubmit","asOverlay","id","type","label","element","validators","VALIDATOR_REQUIRE","errorText","onInput","VALIDATOR_MINLENGTH","disabled","ImageUpload","props","useState","file","setFile","previewUrl","setPreviewUrl","setIsValid","filePickerRef","useRef","useEffect","fileReader","FileReader","onload","result","readAsDataURL","ref","style","display","accept","onChange","pickedFile","fileIsValid","target","files","length","center","src","alt","onClick","current","click"],"mappings":"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","file":"static/js/8.8ac67bec.chunk.js","sourcesContent":["import React, { useContext } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport Input from \"../../shared/components/UI/Input\";\r\nimport { useForm } from \"../../shared/hooks/form-hook\";\r\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\r\nimport Button from \"../../shared/components/UI/Button\";\r\nimport ErrorModal from \"../../shared/components/UI/ErrorModal\";\r\nimport LoadingSpinner from \"../../shared/components/UI/LoadingSpinner\";\r\nimport ImageUpload from \"../../shared/components/UI/ImageUpload\";\r\nimport {\r\n  VALIDATOR_MINLENGTH,\r\n  VALIDATOR_REQUIRE,\r\n} from \"../../shared/components/utils/validators\";\r\nimport { AuthContext } from \"../../shared/context/auth-context\";\r\nimport \"./PlaceForm.css\";\r\n\r\nconst NewPlace = () => {\r\n  const authCtx = useContext(AuthContext);\r\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\r\n  const [formState, inputHandler] = useForm(\r\n    {\r\n      title: {\r\n        value: \"\",\r\n        isValid: false,\r\n      },\r\n      description: {\r\n        value: \"\",\r\n        isValid: false,\r\n      },\r\n      address: {\r\n        value: \"\",\r\n        isValid: false,\r\n      },\r\n      image: {\r\n        value: null,\r\n        isValid: false,\r\n      },\r\n    },\r\n    false\r\n  );\r\n\r\n  const history = useHistory();\r\n\r\n  const placeSubmitHandler = async (event) => {\r\n    event.preventDefault();\r\n    try {\r\n      const formData = new FormData();\r\n      formData.append(\"title\", formState.inputs.title.value);\r\n      formData.append(\"description\", formState.inputs.description.value);\r\n      formData.append(\"address\", formState.inputs.address.value);\r\n      formData.append(\"creator\", authCtx.userId);\r\n      formData.append(\"image\", formState.inputs.image.value);\r\n      await sendRequest(\r\n        `${process.env.REACT_APP_BACKEND_URL}/api/places`,\r\n        \"POST\",\r\n        formData,\r\n        {\r\n          Authorization: `Bearer ${authCtx.token}`,\r\n        }\r\n      );\r\n      history.push(\"/\");\r\n    } catch (err) {}\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <ErrorModal error={error} onClear={clearError} />\r\n      <form className=\"place-form\" onSubmit={placeSubmitHandler}>\r\n        {isLoading && <LoadingSpinner asOverlay />}\r\n        <Input\r\n          id=\"title\"\r\n          type=\"text\"\r\n          label=\"Title\"\r\n          element=\"input\"\r\n          validators={[VALIDATOR_REQUIRE()]}\r\n          errorText=\"Please enter a valid title!\"\r\n          onInput={inputHandler}\r\n        />\r\n        <Input\r\n          id=\"description\"\r\n          label=\"Description\"\r\n          element=\"textarea\"\r\n          validators={[VALIDATOR_MINLENGTH(5)]}\r\n          errorText=\"Please enter a valid description! (Atleast 5 characters)\"\r\n          onInput={inputHandler}\r\n        />\r\n        <Input\r\n          id=\"address\"\r\n          label=\"Address\"\r\n          element=\"input\"\r\n          validators={[VALIDATOR_REQUIRE()]}\r\n          errorText=\"Please enter a valid address!\"\r\n          onInput={inputHandler}\r\n        />\r\n        <ImageUpload\r\n          id=\"image\"\r\n          onInput={inputHandler}\r\n          errorText=\"Please provide an image\"\r\n        />\r\n        <Button type=\"submit\" disabled={!formState.isValid}>\r\n          Add Place\r\n        </Button>\r\n      </form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default NewPlace;\r\n","import React, { useRef, useState, useEffect } from \"react\";\r\n\r\nimport Button from \"./Button\";\r\nimport \"./ImageUpload.css\";\r\n\r\nconst ImageUpload = (props) => {\r\n  const [file, setFile] = useState();\r\n  const [previewUrl, setPreviewUrl] = useState();\r\n  const [isValid, setIsValid] = useState(false);\r\n\r\n  const filePickerRef = useRef();\r\n\r\n  useEffect(() => {\r\n    if (!file) {\r\n      return;\r\n    }\r\n    const fileReader = new FileReader();\r\n    fileReader.onload = () => {\r\n      setPreviewUrl(fileReader.result);\r\n    };\r\n    fileReader.readAsDataURL(file);\r\n  }, [file]);\r\n\r\n  const pickedHandler = (event) => {\r\n    let pickedFile;\r\n    let fileIsValid = isValid;\r\n    if (event.target.files || event.target.files.length === 1) {\r\n      pickedFile = event.target.files[0];\r\n      setFile(pickedFile);\r\n      setIsValid(true);\r\n      fileIsValid = true;\r\n    } else {\r\n      setIsValid(false);\r\n      fileIsValid = false;\r\n    }\r\n    props.onInput(props.id, pickedFile, fileIsValid);\r\n  };\r\n\r\n  const pickImageHandler = () => {\r\n    filePickerRef.current.click();\r\n  };\r\n\r\n  return (\r\n    <div className=\"form-control\">\r\n      <input\r\n        id={props.id}\r\n        ref={filePickerRef}\r\n        style={{ display: \"none\" }}\r\n        type=\"file\"\r\n        accept=\".jpg, .png, .jpeg\"\r\n        onChange={pickedHandler}\r\n      />\r\n      <div className={`image-upload ${props.center && \"center\"}`}>\r\n        <div className=\"image-upload__preview\">\r\n          {previewUrl && <img src={previewUrl} alt=\"Preview\" />}\r\n          {!previewUrl && <p>Please pick an image</p>}\r\n        </div>\r\n        <Button type=\"button\" onClick={pickImageHandler}>\r\n          Pick Image\r\n        </Button>\r\n      </div>\r\n      {!isValid && <p>{props.errorText}</p>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ImageUpload;\r\n"],"sourceRoot":""}