{"version":3,"sources":["user/pages/Auth.js","shared/components/UI/Card.js","shared/components/UI/ImageUpload.js"],"names":["Auth","authCtx","useContext","AuthContext","useState","isLoginMode","setIsLoginMode","useHttpClient","isLoading","error","sendRequest","clearError","useForm","email","value","isValid","password","formState","inputHandler","setFormData","authSubmitHandler","event","a","preventDefault","process","JSON","stringify","inputs","responseData","login","userId","token","formData","FormData","append","name","image","onClear","className","asOverlay","onSubmit","id","type","label","element","validators","VALIDATOR_REQUIRE","errorText","onInput","center","VALIDATOR_EMAIL","VALIDATOR_MINLENGTH","disabled","inverse","onClick","undefined","prevMode","Card","props","style","children","ImageUpload","file","setFile","previewUrl","setPreviewUrl","setIsValid","filePickerRef","useRef","useEffect","fileReader","FileReader","onload","result","readAsDataURL","ref","display","accept","onChange","pickedFile","fileIsValid","target","files","length","src","alt","current","click"],"mappings":"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","file":"static/js/7.e0f9751f.chunk.js","sourcesContent":["import React, { useContext, useState } from \"react\";\r\nimport Button from \"../../shared/components/UI/Button\";\r\nimport Card from \"../../shared/components/UI/Card\";\r\nimport Input from \"../../shared/components/UI/Input\";\r\nimport ErrorModal from \"../../shared/components/UI/ErrorModal\";\r\nimport LoadingSpinner from \"../../shared/components/UI/LoadingSpinner\";\r\nimport ImageUpload from \"../../shared/components/UI/ImageUpload\";\r\nimport {\r\n  VALIDATOR_EMAIL,\r\n  VALIDATOR_MINLENGTH,\r\n  VALIDATOR_REQUIRE,\r\n} from \"../../shared/components/utils/validators\";\r\nimport { useForm } from \"../../shared/hooks/form-hook\";\r\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\r\nimport { AuthContext } from \"../../shared/context/auth-context\";\r\n\r\nimport \"./Auth.css\";\r\n\r\nconst Auth = () => {\r\n  const authCtx = useContext(AuthContext);\r\n\r\n  const [isLoginMode, setIsLoginMode] = useState(true);\r\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\r\n\r\n  const [formState, inputHandler, setFormData] = useForm(\r\n    {\r\n      email: {\r\n        value: \"\",\r\n        isValid: false,\r\n      },\r\n      password: {\r\n        value: \"\",\r\n        isValid: false,\r\n      },\r\n    },\r\n    false\r\n  );\r\n\r\n  const switchModehandler = () => {\r\n    if (!isLoginMode) {\r\n      setFormData(\r\n        {\r\n          ...formState.inputs,\r\n          name: undefined,\r\n          image: undefined,\r\n        },\r\n        formState.inputs.email.isValid && formState.inputs.password.isValid\r\n      );\r\n    } else {\r\n      setFormData(\r\n        {\r\n          ...formState.inputs,\r\n          name: {\r\n            value: \"\",\r\n            isValid: false,\r\n          },\r\n          image: {\r\n            value: null,\r\n            isValid: false,\r\n          },\r\n        },\r\n        false\r\n      );\r\n    }\r\n    setIsLoginMode((prevMode) => !prevMode);\r\n  };\r\n\r\n  const authSubmitHandler = async (event) => {\r\n    event.preventDefault();\r\n\r\n    if (isLoginMode) {\r\n      try {\r\n        const responseData = await sendRequest(\r\n          `${process.env.REACT_APP_BACKEND_URL}/api/users/login`,\r\n          \"POST\",\r\n          JSON.stringify({\r\n            email: formState.inputs.email.value,\r\n            password: formState.inputs.password.value,\r\n          }),\r\n          {\r\n            \"Content-Type\": \"application/json\",\r\n          }\r\n        );\r\n        authCtx.login(responseData.userId, responseData.token);\r\n      } catch (error) {}\r\n    } else {\r\n      try {\r\n        const formData = new FormData();\r\n        formData.append(\"email\", formState.inputs.email.value);\r\n        formData.append(\"name\", formState.inputs.name.value);\r\n        formData.append(\"password\", formState.inputs.password.value);\r\n        formData.append(\"image\", formState.inputs.image.value);\r\n        const responseData = await sendRequest(\r\n          `${process.env.REACT_APP_BACKEND_URL}/api/users/signup`,\r\n          \"POST\",\r\n          formData\r\n        );\r\n\r\n        authCtx.login(responseData.userId, responseData.token);\r\n      } catch (error) {}\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <ErrorModal error={error} onClear={clearError} />\r\n      <Card className=\"authentication\">\r\n        {isLoading && <LoadingSpinner asOverlay />}\r\n        <h2>Login Required</h2>\r\n        <hr />\r\n        <form onSubmit={authSubmitHandler}>\r\n          {!isLoginMode && (\r\n            <Input\r\n              id=\"name\"\r\n              type=\"text\"\r\n              label=\"Your Name\"\r\n              element=\"input\"\r\n              validators={[VALIDATOR_REQUIRE()]}\r\n              errorText=\"Please Enter your name\"\r\n              onInput={inputHandler}\r\n            />\r\n          )}\r\n          {!isLoginMode && (\r\n            <ImageUpload\r\n              id=\"image\"\r\n              center\r\n              onInput={inputHandler}\r\n              errorText=\"Please provide an image\"\r\n            />\r\n          )}\r\n          <Input\r\n            id=\"email\"\r\n            element=\"input\"\r\n            type=\"email\"\r\n            label=\"E-Mail\"\r\n            validators={[VALIDATOR_EMAIL()]}\r\n            errorText=\"Please provide a valid email address!\"\r\n            onInput={inputHandler}\r\n          />\r\n          <Input\r\n            id=\"password\"\r\n            element=\"input\"\r\n            type=\"password\"\r\n            label=\"Password\"\r\n            validators={[VALIDATOR_MINLENGTH(6)]}\r\n            errorText=\"Please provide a valid password! (Atleast 6 characters long\"\r\n            onInput={inputHandler}\r\n          />\r\n          <Button type=\"submit\" disabled={!formState.isValid}>\r\n            {isLoginMode ? \"Login\" : \"Signup\"}\r\n          </Button>\r\n        </form>\r\n        <Button inverse onClick={switchModehandler}>\r\n          Switch to {isLoginMode ? \"Signup\" : \"Login\"}\r\n        </Button>\r\n      </Card>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Auth;\r\n","import React from \"react\";\r\n\r\nimport \"./Card.css\";\r\n\r\nconst Card = (props) => {\r\n  return (\r\n    <div className={`card ${props.className}`} style={props.style}>\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React, { useRef, useState, useEffect } from \"react\";\r\n\r\nimport Button from \"./Button\";\r\nimport \"./ImageUpload.css\";\r\n\r\nconst ImageUpload = (props) => {\r\n  const [file, setFile] = useState();\r\n  const [previewUrl, setPreviewUrl] = useState();\r\n  const [isValid, setIsValid] = useState(false);\r\n\r\n  const filePickerRef = useRef();\r\n\r\n  useEffect(() => {\r\n    if (!file) {\r\n      return;\r\n    }\r\n    const fileReader = new FileReader();\r\n    fileReader.onload = () => {\r\n      setPreviewUrl(fileReader.result);\r\n    };\r\n    fileReader.readAsDataURL(file);\r\n  }, [file]);\r\n\r\n  const pickedHandler = (event) => {\r\n    let pickedFile;\r\n    let fileIsValid = isValid;\r\n    if (event.target.files || event.target.files.length === 1) {\r\n      pickedFile = event.target.files[0];\r\n      setFile(pickedFile);\r\n      setIsValid(true);\r\n      fileIsValid = true;\r\n    } else {\r\n      setIsValid(false);\r\n      fileIsValid = false;\r\n    }\r\n    props.onInput(props.id, pickedFile, fileIsValid);\r\n  };\r\n\r\n  const pickImageHandler = () => {\r\n    filePickerRef.current.click();\r\n  };\r\n\r\n  return (\r\n    <div className=\"form-control\">\r\n      <input\r\n        id={props.id}\r\n        ref={filePickerRef}\r\n        style={{ display: \"none\" }}\r\n        type=\"file\"\r\n        accept=\".jpg, .png, .jpeg\"\r\n        onChange={pickedHandler}\r\n      />\r\n      <div className={`image-upload ${props.center && \"center\"}`}>\r\n        <div className=\"image-upload__preview\">\r\n          {previewUrl && <img src={previewUrl} alt=\"Preview\" />}\r\n          {!previewUrl && <p>Please pick an image</p>}\r\n        </div>\r\n        <Button type=\"button\" onClick={pickImageHandler}>\r\n          Pick Image\r\n        </Button>\r\n      </div>\r\n      {!isValid && <p>{props.errorText}</p>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ImageUpload;\r\n"],"sourceRoot":""}