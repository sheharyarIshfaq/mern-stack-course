{"version":3,"sources":["places/pages/UpdatePlace.js","shared/components/UI/Card.js"],"names":["UpdatePlace","authCtx","useContext","AuthContext","useHttpClient","isLoading","error","sendRequest","clearError","useState","loadedPlace","setLoadedPlace","placeId","useParams","history","useHistory","useForm","title","value","isValid","description","formState","inputHandler","setFormData","useEffect","fetchPlace","a","process","responseData","place","placeUpdateSubmitHandler","event","preventDefault","JSON","stringify","inputs","Authorization","token","push","userId","className","onClear","onSubmit","id","element","type","label","validators","VALIDATOR_REQUIRE","errorText","onInput","initialValue","initialValid","VALIDATOR_MINLENGTH","disabled","Card","props","style","children"],"mappings":"uPAsIeA,UArHK,WAClB,IAAMC,EAAUC,qBAAWC,KAC3B,EAAsDC,cAA9CC,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,MAAOC,EAA1B,EAA0BA,YAAaC,EAAvC,EAAuCA,WACvC,EAAsCC,qBAAtC,mBAAOC,EAAP,KAAoBC,EAApB,KACQC,EAAYC,cAAZD,QACFE,EAAUC,cAEhB,EAA+CC,YAC7C,CACEC,MAAO,CACLC,MAAO,GACPC,SAAS,GAEXC,YAAa,CACXF,MAAO,GACPC,SAAS,KAGb,GAXF,mBAAOE,EAAP,KAAkBC,EAAlB,KAAgCC,EAAhC,KAcAC,qBAAU,WACR,IAAMC,EAAU,uCAAG,4BAAAC,EAAA,+EAEYnB,EAAY,GAAD,OACjCoB,wBADiC,uBACef,IAHtC,OAETgB,EAFS,OAKfjB,EAAeiB,EAAaC,OAC5BN,EACE,CACEN,MAAO,CACLC,MAAOU,EAAaC,MAAMZ,MAC1BE,SAAS,GAEXC,YAAa,CACXF,MAAOU,EAAaC,MAAMT,YAC1BD,SAAS,KAGb,GAjBa,yGAAH,qDAqBhBM,MACC,CAAClB,EAAaK,EAASW,IAE1B,IAAMO,EAAwB,uCAAG,WAAOC,GAAP,SAAAL,EAAA,6DAC/BK,EAAMC,iBADyB,kBAGvBzB,EAAY,GAAD,OACZoB,wBADY,uBACoCf,GACnD,QACAqB,KAAKC,UAAU,CACbjB,MAAOI,EAAUc,OAAOlB,MAAMC,MAC9BE,YAAaC,EAAUc,OAAOf,YAAYF,QAE5C,CACE,eAAgB,mBAChBkB,cAAc,UAAD,OAAYnC,EAAQoC,SAZR,OAe7BvB,EAAQwB,KAAR,WAAiBrC,EAAQsC,OAAzB,YAf6B,uGAAH,sDAmB9B,OAAIlC,EAEA,qBAAKmC,UAAU,SAAf,SACE,cAAC,IAAD,MAKD9B,GAAgBJ,EAUnB,qCACE,cAAC,IAAD,CAAYA,MAAOA,EAAOmC,QAASjC,KACjCH,GAAaK,GACb,uBAAM8B,UAAU,aAAaE,SAAUZ,EAAvC,UACE,cAAC,IAAD,CACEa,GAAG,QACHC,QAAQ,QACRC,KAAK,OACLC,MAAM,QACNC,WAAY,CAACC,eACbC,UAAU,8BACVC,QAAS5B,EACT6B,aAAczC,EAAYO,MAC1BmC,cAAc,IAEhB,cAAC,IAAD,CACET,GAAG,cACHC,QAAQ,WACRE,MAAM,cACNC,WAAY,CAACM,YAAoB,IACjCJ,UAAU,gEACVC,QAAS5B,EACT6B,aAAczC,EAAYU,YAC1BgC,cAAc,IAEhB,cAAC,IAAD,CAAQP,KAAK,SAASS,UAAWjC,EAAUF,QAA3C,gCAjCJ,qBAAKqB,UAAU,SAAf,SACE,cAAC,IAAD,UACE,6D,gCC9FV,sBAYee,IARF,SAACC,GACZ,OACE,qBAAKhB,UAAS,eAAUgB,EAAMhB,WAAaiB,MAAOD,EAAMC,MAAxD,SACGD,EAAME,a","file":"static/js/9.cfc945c3.chunk.js","sourcesContent":["import React, { useEffect, useState, useContext } from \"react\";\r\nimport { useParams, useHistory } from \"react-router\";\r\n\r\nimport Input from \"../../shared/components/UI/Input\";\r\nimport Button from \"../../shared/components/UI/Button\";\r\nimport Card from \"../../shared/components/UI/Card\";\r\nimport {\r\n  VALIDATOR_MINLENGTH,\r\n  VALIDATOR_REQUIRE,\r\n} from \"../../shared/components/utils/validators\";\r\nimport { useForm } from \"../../shared/hooks/form-hook\";\r\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\r\nimport \"./PlaceForm.css\";\r\nimport { AuthContext } from \"../../shared/context/auth-context\";\r\nimport LoadingSpinner from \"../../shared/components/UI/LoadingSpinner\";\r\nimport ErrorModal from \"../../shared/components/UI/ErrorModal\";\r\n\r\nconst UpdatePlace = () => {\r\n  const authCtx = useContext(AuthContext);\r\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\r\n  const [loadedPlace, setLoadedPlace] = useState();\r\n  const { placeId } = useParams();\r\n  const history = useHistory();\r\n\r\n  const [formState, inputHandler, setFormData] = useForm(\r\n    {\r\n      title: {\r\n        value: \"\",\r\n        isValid: false,\r\n      },\r\n      description: {\r\n        value: \"\",\r\n        isValid: false,\r\n      },\r\n    },\r\n    true\r\n  );\r\n\r\n  useEffect(() => {\r\n    const fetchPlace = async () => {\r\n      try {\r\n        const responseData = await sendRequest(\r\n          `${process.env.REACT_APP_BACKEND_URL}/api/places/${placeId}`\r\n        );\r\n        setLoadedPlace(responseData.place);\r\n        setFormData(\r\n          {\r\n            title: {\r\n              value: responseData.place.title,\r\n              isValid: true,\r\n            },\r\n            description: {\r\n              value: responseData.place.description,\r\n              isValid: true,\r\n            },\r\n          },\r\n          true\r\n        );\r\n      } catch (error) {}\r\n    };\r\n    fetchPlace();\r\n  }, [sendRequest, placeId, setFormData]);\r\n\r\n  const placeUpdateSubmitHandler = async (event) => {\r\n    event.preventDefault();\r\n    try {\r\n      await sendRequest(\r\n        `${process.env.REACT_APP_BACKEND_URL}/api/places/${placeId}`,\r\n        \"PATCH\",\r\n        JSON.stringify({\r\n          title: formState.inputs.title.value,\r\n          description: formState.inputs.description.value,\r\n        }),\r\n        {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: `Bearer ${authCtx.token}`,\r\n        }\r\n      );\r\n      history.push(`/${authCtx.userId}/places`);\r\n    } catch (error) {}\r\n  };\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <div className=\"center\">\r\n        <LoadingSpinner />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (!loadedPlace && !error) {\r\n    return (\r\n      <div className=\"center\">\r\n        <Card>\r\n          <h2>Could not find place!</h2>\r\n        </Card>\r\n      </div>\r\n    );\r\n  }\r\n  return (\r\n    <>\r\n      <ErrorModal error={error} onClear={clearError} />\r\n      {!isLoading && loadedPlace && (\r\n        <form className=\"place-form\" onSubmit={placeUpdateSubmitHandler}>\r\n          <Input\r\n            id=\"title\"\r\n            element=\"input\"\r\n            type=\"text\"\r\n            label=\"Title\"\r\n            validators={[VALIDATOR_REQUIRE()]}\r\n            errorText=\"Please enter a valid title!\"\r\n            onInput={inputHandler}\r\n            initialValue={loadedPlace.title}\r\n            initialValid={true}\r\n          />\r\n          <Input\r\n            id=\"description\"\r\n            element=\"textarea\"\r\n            label=\"Description\"\r\n            validators={[VALIDATOR_MINLENGTH(5)]}\r\n            errorText=\"Please enter a valid description! (Must be 5 characters long)\"\r\n            onInput={inputHandler}\r\n            initialValue={loadedPlace.description}\r\n            initialValid={true}\r\n          />\r\n          <Button type=\"submit\" disabled={!formState.isValid}>\r\n            Update Place\r\n          </Button>\r\n        </form>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default UpdatePlace;\r\n","import React from \"react\";\r\n\r\nimport \"./Card.css\";\r\n\r\nconst Card = (props) => {\r\n  return (\r\n    <div className={`card ${props.className}`} style={props.style}>\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n"],"sourceRoot":""}